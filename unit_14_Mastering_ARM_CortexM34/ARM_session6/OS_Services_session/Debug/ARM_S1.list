
ARM_S1.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e8  080005f0  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e8  080005e8  000105f0  2**0
                  CONTENTS
  4 .ARM          00000000  080005e8  080005e8  000105f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e8  080005f0  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e8  080005e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  080005f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080005f0  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d80  00000000  00000000  00010619  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004b3  00000000  00000000  00012399  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000654  00000000  00000000  0001284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000120  00000000  00000000  00012ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00012fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002ea9  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d8b  00000000  00000000  00015f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000e028  00000000  00000000  00016cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024d14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000380  00000000  00000000  00024d90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005d0 	.word	0x080005d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005d0 	.word	0x080005d0

08000170 <EXTI0_IRQHandler>:
/**=========================================================================================================================================================*/
                                                      //INTERRUPT SERVICE ROUTINE


void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	arr_of_ptF[0]();                                                           //call function
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <EXTI0_IRQHandler+0x28>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
    EXTI->PR |= (1<<0);                                                        //clear pending status in EXTI
 800017a:	4b08      	ldr	r3, [pc, #32]	; (800019c <EXTI0_IRQHandler+0x2c>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a07      	ldr	r2, [pc, #28]	; (800019c <EXTI0_IRQHandler+0x2c>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI0_IRQ);                                              //clear pending status in NVIC
 8000186:	4b06      	ldr	r3, [pc, #24]	; (80001a0 <EXTI0_IRQHandler+0x30>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x30>)
 800018c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000190:	6013      	str	r3, [r2, #0]
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	2000001c 	.word	0x2000001c
 800019c:	40010400 	.word	0x40010400
 80001a0:	e000e280 	.word	0xe000e280

080001a4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	arr_of_ptF[1]();
 80001a8:	4b08      	ldr	r3, [pc, #32]	; (80001cc <EXTI1_IRQHandler+0x28>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4798      	blx	r3
    EXTI->PR |= (1<<1);
 80001ae:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <EXTI1_IRQHandler+0x2c>)
 80001b0:	695b      	ldr	r3, [r3, #20]
 80001b2:	4a07      	ldr	r2, [pc, #28]	; (80001d0 <EXTI1_IRQHandler+0x2c>)
 80001b4:	f043 0302 	orr.w	r3, r3, #2
 80001b8:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI1_IRQ);
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <EXTI1_IRQHandler+0x30>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <EXTI1_IRQHandler+0x30>)
 80001c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001c4:	6013      	str	r3, [r2, #0]
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	40010400 	.word	0x40010400
 80001d4:	e000e280 	.word	0xe000e280

080001d8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	arr_of_ptF[2]();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <EXTI2_IRQHandler+0x28>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
    EXTI->PR |= (1<<2);
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <EXTI2_IRQHandler+0x2c>)
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	4a07      	ldr	r2, [pc, #28]	; (8000204 <EXTI2_IRQHandler+0x2c>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI2_IRQ);
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <EXTI2_IRQHandler+0x30>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a05      	ldr	r2, [pc, #20]	; (8000208 <EXTI2_IRQHandler+0x30>)
 80001f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001f8:	6013      	str	r3, [r2, #0]

}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000001c 	.word	0x2000001c
 8000204:	40010400 	.word	0x40010400
 8000208:	e000e280 	.word	0xe000e280

0800020c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	arr_of_ptF[3]();
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <EXTI3_IRQHandler+0x28>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4798      	blx	r3
    EXTI->PR |= (1<<3);
 8000216:	4b08      	ldr	r3, [pc, #32]	; (8000238 <EXTI3_IRQHandler+0x2c>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	4a07      	ldr	r2, [pc, #28]	; (8000238 <EXTI3_IRQHandler+0x2c>)
 800021c:	f043 0308 	orr.w	r3, r3, #8
 8000220:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI3_IRQ);
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <EXTI3_IRQHandler+0x30>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <EXTI3_IRQHandler+0x30>)
 8000228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022c:	6013      	str	r3, [r2, #0]

}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000001c 	.word	0x2000001c
 8000238:	40010400 	.word	0x40010400
 800023c:	e000e280 	.word	0xe000e280

08000240 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	arr_of_ptF[4]();
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <EXTI4_IRQHandler+0x28>)
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	4798      	blx	r3
    EXTI->PR |= (1<<4);
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <EXTI4_IRQHandler+0x2c>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <EXTI4_IRQHandler+0x2c>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6153      	str	r3, [r2, #20]
    NVIC_ICPR0 |= (1<<EXTI1_IRQ);
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <EXTI4_IRQHandler+0x30>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <EXTI4_IRQHandler+0x30>)
 800025c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000260:	6013      	str	r3, [r2, #0]

}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	2000001c 	.word	0x2000001c
 800026c:	40010400 	.word	0x40010400
 8000270:	e000e280 	.word	0xe000e280

08000274 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
     if ( EXTI->PR & (1<<5) )    		 { EXTI->PR |= (1<<5);   	 arr_of_ptF[5](); }
 8000278:	4b29      	ldr	r3, [pc, #164]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x22>
 8000284:	4b26      	ldr	r3, [pc, #152]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a25      	ldr	r2, [pc, #148]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <EXTI9_5_IRQHandler+0xb0>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4798      	blx	r3
     if ( EXTI->PR & (1<<6) ) 			 { EXTI->PR |= (1<<6);   	 arr_of_ptF[6](); }
 8000296:	4b22      	ldr	r3, [pc, #136]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x40>
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <EXTI9_5_IRQHandler+0xb0>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4798      	blx	r3
     if ( EXTI->PR & (1<<7) ) 			 { EXTI->PR |= (1<<7);   	 arr_of_ptF[7](); }
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x5e>
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a16      	ldr	r2, [pc, #88]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <EXTI9_5_IRQHandler+0xb0>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4798      	blx	r3
     if ( EXTI->PR & (1<<8) ) 			 { EXTI->PR |= (1<<8);   	 arr_of_ptF[8](); }
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d008      	beq.n	80002f0 <EXTI9_5_IRQHandler+0x7c>
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <EXTI9_5_IRQHandler+0xb0>)
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	4798      	blx	r3
     if ( EXTI->PR & (1<<9) ) 		   	 { EXTI->PR |= (1<<9);   	 arr_of_ptF[9](); }
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d008      	beq.n	800030e <EXTI9_5_IRQHandler+0x9a>
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <EXTI9_5_IRQHandler+0xac>)
 8000302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000306:	6153      	str	r3, [r2, #20]
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <EXTI9_5_IRQHandler+0xb0>)
 800030a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030c:	4798      	blx	r3

    NVIC_ICPR0 |= (1<<EXTI5_9_IRQ);
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <EXTI9_5_IRQHandler+0xb4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <EXTI9_5_IRQHandler+0xb4>)
 8000314:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000318:	6013      	str	r3, [r2, #0]

	}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010400 	.word	0x40010400
 8000324:	2000001c 	.word	0x2000001c
 8000328:	e000e280 	.word	0xe000e280

0800032c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    if ( EXTI->PR & (1<<10) )    		 { EXTI->PR |= (1<<10);   	 arr_of_ptF[10](); }
 8000330:	4b30      	ldr	r3, [pc, #192]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000338:	2b00      	cmp	r3, #0
 800033a:	d008      	beq.n	800034e <EXTI15_10_IRQHandler+0x22>
 800033c:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a2c      	ldr	r2, [pc, #176]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 8000342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000346:	6153      	str	r3, [r2, #20]
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <EXTI15_10_IRQHandler+0xcc>)
 800034a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800034c:	4798      	blx	r3
    if ( EXTI->PR & (1<<11) ) 			 { EXTI->PR |= (1<<11);   	 arr_of_ptF[11](); }
 800034e:	4b29      	ldr	r3, [pc, #164]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000356:	2b00      	cmp	r3, #0
 8000358:	d008      	beq.n	800036c <EXTI15_10_IRQHandler+0x40>
 800035a:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a25      	ldr	r2, [pc, #148]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 8000360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <EXTI15_10_IRQHandler+0xcc>)
 8000368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036a:	4798      	blx	r3
    if ( EXTI->PR & (1<<12) ) 			 { EXTI->PR |= (1<<12);   	 arr_of_ptF[12](); }
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d008      	beq.n	800038a <EXTI15_10_IRQHandler+0x5e>
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800037e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000382:	6153      	str	r3, [r2, #20]
 8000384:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <EXTI15_10_IRQHandler+0xcc>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4798      	blx	r3
    if ( EXTI->PR & (1<<13) ) 			 { EXTI->PR |= (1<<13);   	 arr_of_ptF[13](); }
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d008      	beq.n	80003a8 <EXTI15_10_IRQHandler+0x7c>
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 800039c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <EXTI15_10_IRQHandler+0xcc>)
 80003a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003a6:	4798      	blx	r3
    if ( EXTI->PR & (1<<14) ) 		   	 { EXTI->PR |= (1<<14);   	 arr_of_ptF[14](); }
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d008      	beq.n	80003c6 <EXTI15_10_IRQHandler+0x9a>
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 80003ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003be:	6153      	str	r3, [r2, #20]
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <EXTI15_10_IRQHandler+0xcc>)
 80003c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003c4:	4798      	blx	r3
    if ( EXTI->PR & (1<<15) ) 		   	 { EXTI->PR |= (1<<15);   	 arr_of_ptF[15](); }
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d008      	beq.n	80003e4 <EXTI15_10_IRQHandler+0xb8>
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <EXTI15_10_IRQHandler+0xc8>)
 80003d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <EXTI15_10_IRQHandler+0xcc>)
 80003e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003e2:	4798      	blx	r3

   NVIC_ICPR1 |= (1<<(EXTI10_15_IRQ - 32));
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <EXTI15_10_IRQHandler+0xd0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <EXTI15_10_IRQHandler+0xd0>)
 80003ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ee:	6013      	str	r3, [r2, #0]

	}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40010400 	.word	0x40010400
 80003f8:	2000001c 	.word	0x2000001c
 80003fc:	e000e284 	.word	0xe000e284

08000400 <service_handler>:
}

//-----------------------------------------------------LAB2------------------------------------------------------------------------//

void service_handler(int*ptr)
{
 8000400:	b480      	push	{r7}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	unsigned char* pc_val = *(ptr + 6);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3318      	adds	r3, #24
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	61bb      	str	r3, [r7, #24]
	pc_val -= 2 ;
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	3b02      	subs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
	unsigned char index =  * pc_val;
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	75fb      	strb	r3, [r7, #23]
	int x = *(ptr);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	613b      	str	r3, [r7, #16]
	int y =  *(ptr+1);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
	int z;
	switch(index)
 8000428:	7dfb      	ldrb	r3, [r7, #23]
 800042a:	3b01      	subs	r3, #1
 800042c:	2b03      	cmp	r3, #3
 800042e:	d822      	bhi.n	8000476 <service_handler+0x76>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <service_handler+0x38>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000449 	.word	0x08000449
 800043c:	08000453 	.word	0x08000453
 8000440:	0800045d 	.word	0x0800045d
 8000444:	08000469 	.word	0x08000469
	{
	case 1 :
		z = x + y ;
 8000448:	693a      	ldr	r2, [r7, #16]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	4413      	add	r3, r2
 800044e:	61fb      	str	r3, [r7, #28]
		break;
 8000450:	e012      	b.n	8000478 <service_handler+0x78>
	case 2 :
		z = x - y ;
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	61fb      	str	r3, [r7, #28]
		break ;
 800045a:	e00d      	b.n	8000478 <service_handler+0x78>
	case 3 : z = x*y ;
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	fb02 f303 	mul.w	r3, r2, r3
 8000464:	61fb      	str	r3, [r7, #28]
	break ;
 8000466:	e007      	b.n	8000478 <service_handler+0x78>
	case 4 :  SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk  ;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <service_handler+0x88>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	4a06      	ldr	r2, [pc, #24]	; (8000488 <service_handler+0x88>)
 800046e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000472:	6053      	str	r3, [r2, #4]
	break ;
 8000474:	e000      	b.n	8000478 <service_handler+0x78>
	default :
		break;
 8000476:	bf00      	nop
	}

	__asm("MOV R5,%0"
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	461d      	mov	r5, r3
			:
			:"r" (z) );
}
 800047c:	bf00      	nop
 800047e:	3724      	adds	r7, #36	; 0x24
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <SVC_Handler>:
int*ptr;

__attribute__((naked))   void SVC_Handler()
{

	__asm("TST LR , 0x4 ");
 800048c:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ");
 8000490:	bf0c      	ite	eq
	__asm("MRSEQ R0 , MSP");
 8000492:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0 , PSP");
 8000496:	f3ef 8009 	mrsne	r0, PSP
	__asm("b service_handler");
 800049a:	f7ff bfb1 	b.w	8000400 <service_handler>

}
 800049e:	bf00      	nop

080004a0 <OS_SVC_Set>:

int OS_SVC_Set(int a , int b , int index)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]

	switch(index)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	d813      	bhi.n	80004dc <OS_SVC_Set+0x3c>
 80004b4:	a201      	add	r2, pc, #4	; (adr r2, 80004bc <OS_SVC_Set+0x1c>)
 80004b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ba:	bf00      	nop
 80004bc:	080004cd 	.word	0x080004cd
 80004c0:	080004d1 	.word	0x080004d1
 80004c4:	080004d5 	.word	0x080004d5
 80004c8:	080004d9 	.word	0x080004d9
	{
	case 1 :
		__asm("SVC #0x1");
 80004cc:	df01      	svc	1
		break;
 80004ce:	e006      	b.n	80004de <OS_SVC_Set+0x3e>
	case 2 :
		__asm("SVC #0x2");
 80004d0:	df02      	svc	2
		break;
 80004d2:	e004      	b.n	80004de <OS_SVC_Set+0x3e>
	case 3 :
		__asm("SVC #0x3");
 80004d4:	df03      	svc	3
		break;
 80004d6:	e002      	b.n	80004de <OS_SVC_Set+0x3e>
	case 4 :
		__asm("SVC #0x4");
 80004d8:	df04      	svc	4
		break;
 80004da:	e000      	b.n	80004de <OS_SVC_Set+0x3e>
	default :
		break;
 80004dc:	bf00      	nop

	}
	int result ;
	__asm("MOV %0 , R5"
 80004de:	462b      	mov	r3, r5
 80004e0:	617b      	str	r3, [r7, #20]
			:"=r" (result)
			 :  ) ;

	return result;
 80004e2:	697b      	ldr	r3, [r7, #20]

}
 80004e4:	4618      	mov	r0, r3
 80004e6:	371c      	adds	r7, #28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  __asm("nop");
 80004f4:	bf00      	nop
	}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <main>:

}

int main(void)

{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b084      	sub	sp, #16
 8000502:	af00      	add	r7, sp, #0
	MCAL_EXTI_Init(&EXIR9);
	MCAL_EXTI_Enable(EXTI9);
	MainOs();
*/

	int val1 = OS_SVC_Set(10, 2, 1);     //sum
 8000504:	2201      	movs	r2, #1
 8000506:	2102      	movs	r1, #2
 8000508:	200a      	movs	r0, #10
 800050a:	f7ff ffc9 	bl	80004a0 <OS_SVC_Set>
 800050e:	60f8      	str	r0, [r7, #12]
	int val2 = OS_SVC_Set(10, 2, 2);     //subtract
 8000510:	2202      	movs	r2, #2
 8000512:	2102      	movs	r1, #2
 8000514:	200a      	movs	r0, #10
 8000516:	f7ff ffc3 	bl	80004a0 <OS_SVC_Set>
 800051a:	60b8      	str	r0, [r7, #8]
	int val3 = OS_SVC_Set(10, 2, 3);     // mul
 800051c:	2203      	movs	r2, #3
 800051e:	2102      	movs	r1, #2
 8000520:	200a      	movs	r0, #10
 8000522:	f7ff ffbd 	bl	80004a0 <OS_SVC_Set>
 8000526:	6078      	str	r0, [r7, #4]
	 OS_SVC_Set(10, 2, 4);               //pendsv
 8000528:	2204      	movs	r2, #4
 800052a:	2102      	movs	r1, #2
 800052c:	200a      	movs	r0, #10
 800052e:	f7ff ffb7 	bl	80004a0 <OS_SVC_Set>

	while(1)
 8000532:	e7fe      	b.n	8000532 <main+0x34>

08000534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000538:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000562:	f000 f811 	bl	8000588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f7ff ffca 	bl	80004fe <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000578:	080005f0 	.word	0x080005f0
  ldr r2, =_sbss
 800057c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000580:	2000005c 	.word	0x2000005c

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>
	...

08000588 <__libc_init_array>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	2500      	movs	r5, #0
 800058c:	4e0c      	ldr	r6, [pc, #48]	; (80005c0 <__libc_init_array+0x38>)
 800058e:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <__libc_init_array+0x3c>)
 8000590:	1ba4      	subs	r4, r4, r6
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	42a5      	cmp	r5, r4
 8000596:	d109      	bne.n	80005ac <__libc_init_array+0x24>
 8000598:	f000 f81a 	bl	80005d0 <_init>
 800059c:	2500      	movs	r5, #0
 800059e:	4e0a      	ldr	r6, [pc, #40]	; (80005c8 <__libc_init_array+0x40>)
 80005a0:	4c0a      	ldr	r4, [pc, #40]	; (80005cc <__libc_init_array+0x44>)
 80005a2:	1ba4      	subs	r4, r4, r6
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	d105      	bne.n	80005b6 <__libc_init_array+0x2e>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005b0:	4798      	blx	r3
 80005b2:	3501      	adds	r5, #1
 80005b4:	e7ee      	b.n	8000594 <__libc_init_array+0xc>
 80005b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005ba:	4798      	blx	r3
 80005bc:	3501      	adds	r5, #1
 80005be:	e7f2      	b.n	80005a6 <__libc_init_array+0x1e>
 80005c0:	080005e8 	.word	0x080005e8
 80005c4:	080005e8 	.word	0x080005e8
 80005c8:	080005e8 	.word	0x080005e8
 80005cc:	080005ec 	.word	0x080005ec

080005d0 <_init>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr

080005dc <_fini>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr
